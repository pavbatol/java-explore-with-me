create table if not exists users
(
    user_id     bigint generated by default as identity not null,
    user_name   varchar(255)                            not null,
    email       varchar(255)                            not null,
    observable boolean                    default true  not null,
    constraint pk_users primary key (user_id),
    constraint uc_users_email unique (email)
);

create table if not exists categories
(
    cat_id   bigint generated by default as identity not null,
    cat_name varchar(255)                            not null,
    constraint pk_categories primary key (cat_id),
    constraint uc_categories_cat_name unique (cat_name)
);

create table if not exists events
(
    event_id           bigint generated by default as identity   not null,
    annotation         varchar(2000)                             not null,
    cat_id             bigint                                    not null,
    confirmed_requests bigint                      default 0     not null,
    created_on         timestamp without time zone default now() not null,
    description        varchar(7000)                             not null,
    event_date         timestamp without time zone               not null,
    initiator_id       bigint                                    not null,
    latitude           double precision                          not null,
    longitude          double precision                          not null,
    paid               boolean                                   not null,
    participant_limit  integer                     default 0     not null,
    published_on       timestamp without time zone,
    request_moderation boolean                     default true  not null,
    state              varchar(255)                              not null,
    title              varchar(120)                              not null,
    views              BIGINT                      default 0     not null,
    constraint pk_events primary key (event_id),
    constraint fk_events_on_cat foreign key (cat_id) references categories (cat_id),
    constraint fk_events_on_initiator foreign key (initiator_id) references users (user_id)
);

create table if not exists requests
(
    request_id   bigint generated by default as identity not null,
    request_date timestamp without time zone             not null,
    event_id     bigint                                  not null,
    user_id      bigint                                  not null,
    status       varchar(255)                            not null,
    constraint pk_requests primary key (request_id),
    constraint fk_requests_on_event foreign key (event_id) references events (event_id),
    constraint fk_requests_on_user foreign key (user_id) references users (user_id)
);

create table if not exists compilations
(
    comp_id bigint generated by default as identity not null,
    pinned  boolean                   default false not null,
    title   varchar(255)                            not null,
    constraint pk_compilations primary key (comp_id)
);

create table if not exists compilations_events
(
    comp_id  bigint not null,
    event_id bigint not null,
    constraint pk_compilations_events primary key (comp_id, event_id),
    constraint fk_comeve_on_compilation foreign key (comp_id) references compilations (comp_id),
    constraint fk_comeve_on_event foreign key (event_id) references events (event_id)
);

create table if not exists subscriptions
(
    sbr_id   bigint generated by default as identity not null,
    owner_id bigint                                  not null,
    constraint pk_subscriptions primary key (sbr_id),
    constraint fk_subscriptions_on_owner foreign key (owner_id) references users (user_id)
);

create table if not exists subscriptions_favorites
(
    sbr_id bigint not null,
    fav_id bigint not null,
    constraint pk_subscriptions_favorites primary key (sbr_id, fav_id),
    constraint fk_subfav_on_subscription foreign key (sbr_id) references subscriptions (sbr_id),
    constraint fk_subfav_on_user foreign key (fav_id) references users (user_id)
);
